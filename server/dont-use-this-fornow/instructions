1. The first call is the service ‘/authorize’ endpoint, passing to it the client ID, scopes, and redirect URI. This is the call that starts the process of authenticating to user and gets the user’s authorization to access data.

2. The second call is to the Spotify Accounts Service ‘/api/token’ endpoint, passing to it the authorization code returned by the first call and the client secret key. This call returns an access token and also a refresh token.

After both calls are completed, and the user has authorized the app for access, the application will have the ‘access_token’ it needs to retrieve the user data from the Web API.

3. The third call, in the code managing requests to ‘/refresh_token’, a refresh token is sent to ‘/api/token’. This will generate a new access token that we can issue when the previous has expired.


So we make 3 calls:
1. GET to https://accounts.spotify.com/authorize. query params include: client_id, response_type (set to code), redirect_uri. (optional) scope, state, show_dialog

- this is where the user logs in. we get back code and state in the query params that Spotify sends to our callback link.
- user brings back (authorization) code and state

2. POST to https://accounts.spotify.com/api/token. encode in ´application/x-www-form-urlencoded`.
  req.body.params include: grant_type (includes the value "authorization_code"), code (the code that the user brought you), redirect_uri (must match the uri from step 1), client_id, client_secret

- You get back in JSON object: access_token, token_type, scope, expires_in, refresh_token

NOW! FINALLY!
3. You can make requests to Spotify with the user's access_token

